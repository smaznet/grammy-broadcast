{"version":3,"sources":["../src/middleware.ts","../src/utils.ts","../src/broadcast.queue.ts","../src/initChats.queue.ts","../src/index.ts"],"sourcesContent":["import {Composer, Context, InlineKeyboard} from \"grammy\";\r\nimport {BroadcastOptions} from \"./types\";\r\nimport {buildProgressText} from \"./utils\";\r\n\r\nexport function getMiddleware(options: BroadcastOptions) {\r\n    const middleware = new Composer();\r\n\r\n\r\n    let broadcastMiddleware: Composer<Context>;\r\n    if (options.sudoUsers?.length) {\r\n        broadcastMiddleware = middleware.filter((ctx) => {\r\n            if (ctx.from?.id) {\r\n                return options.sudoUsers.includes(ctx.from.id)\r\n            }\r\n            return false;\r\n        })\r\n    } else if (typeof options.hasPermission === 'function') {\r\n        broadcastMiddleware = middleware.filter(options.hasPermission)\r\n    } else {\r\n        broadcastMiddleware = middleware;\r\n    }\r\n    broadcastMiddleware.command([options.cmds.broadcast, options.cmds.copy, options.cmds.forward], async (ctx) => {\r\n        let [command, ...args] = ctx.message!.text.substring(1).split(' ');\r\n        let type: string;\r\n        let filter: string;\r\n        if (command === options.cmds.broadcast) {\r\n            if (args.length < 1) {\r\n                return ctx.reply(`Usage: /${options.cmds.broadcast} <type> [filter]\r\n\r\n\\`type\\` should be copy or forward\r\n\\`filter\\` is anything that want to passed to getBroadcastChats\r\n`, {\r\n                    parse_mode: \"Markdown\",\r\n                })\r\n            }\r\n            type = args[0];\r\n            filter = args.slice(1).join(' ')\r\n        } else if (command === options.cmds.copy) {\r\n            type = 'copy';\r\n            filter = args.join(' ')\r\n        } else if (command === options.cmds.forward) {\r\n            type = 'forward';\r\n            filter = args.join(' ')\r\n        }\r\n\r\n        if (!['copy', 'forward'].includes(type)) {\r\n            return ctx.reply(`Invalid type ${type}`)\r\n        }\r\n\r\n        let brdId = Math.random().toString(36).substring(7);\r\n        if (!ctx.message!.reply_to_message) {\r\n            return ctx.reply('Reply to a message')\r\n        }\r\n        await options.redisInstance.hset(options.keyPrefix + 'info:' + brdId, {\r\n            type: type,\r\n            chatFilter: filter,\r\n            message_ids: ctx.message!.reply_to_message?.message_id.toString(),\r\n            chat_id: ctx.chat.id.toString(),\r\n            user_id: ctx.from!.id,\r\n            id: brdId,\r\n            error: '0',\r\n            sent: '0',\r\n            botId: ctx.me.id,\r\n            total: '-1'\r\n        });\r\n        return ctx.reply(`\r\nReady to broadcast!\r\ncurrently 1 message is in queue\r\nfor send multi message in this broadcast reply this command to another message\r\n<code>/${options.cmds.addmsg} ${brdId}</code>\r\n`, {\r\n            parse_mode: \"HTML\",\r\n            reply_markup: new InlineKeyboard()\r\n                .text('Preview', 'brd:preview:' + brdId)\r\n                .row()\r\n                .text('Start', 'brd:start:' + brdId)\r\n                .text('Cancel', 'brd:stop:' + brdId)\r\n        })\r\n    })\r\n\r\n    broadcastMiddleware.command(options.cmds.addmsg, async (ctx) => {\r\n        let args = ctx.message!.text.split(' ').slice(1);\r\n        if (args.length < 1) {\r\n            return ctx.reply(`Usage: /${options.cmds.addmsg} <id>`)\r\n        }\r\n        let brdId = args[0];\r\n        if (!ctx.message!.reply_to_message) {\r\n            return ctx.reply('Reply to a message')\r\n        }\r\n        let newMsgId = ctx.message!.reply_to_message?.message_id;\r\n        let messageIds = await options.redisInstance.hget(options.keyPrefix + 'info:' + brdId, 'message_ids');\r\n        let currentIds = messageIds.split('_').map((e: string) => Number.parseInt(e));\r\n        if (Math.max(newMsgId, ...currentIds) !== newMsgId) {\r\n            return ctx.reply('Message should be newer than previous messages')\r\n        }\r\n        if (currentIds.includes(newMsgId)) {\r\n            return ctx.reply('Message already in queue')\r\n        }\r\n        currentIds.push(newMsgId);\r\n        await options.redisInstance.hset(options.keyPrefix + 'info:' + brdId, 'message_ids', currentIds.join('_'));\r\n        return ctx.reply(`Message added to queue\r\n\r\nMessages Count ${currentIds.length}`, {\r\n            reply_markup: new InlineKeyboard()\r\n                .text('Preview', 'brd:preview:' + brdId)\r\n                .row()\r\n                .text('Start', 'brd:start:' + brdId)\r\n                .text('Cancel', 'brd:stop:' + brdId)\r\n        })\r\n    });\r\n\r\n\r\n    broadcastMiddleware.callbackQuery(/brd:progress:(\\w+)/, async (ctx) => {\r\n        let info = await options.redisInstance.hgetall(options.keyPrefix + 'info:' + ctx.match[1]);\r\n        return ctx.answerCallbackQuery(\r\n            {\r\n                text: buildProgressText(+info.error, +info.sent, +info.total),\r\n                show_alert: true\r\n            }\r\n        )\r\n\r\n    });\r\n    broadcastMiddleware.callbackQuery(/brd:pause:(\\w+)/, async (ctx) => {\r\n        await options.redisInstance.hset(options.keyPrefix + 'info:' + ctx.match[1], 'paused', '1');\r\n        return ctx.editMessageText('Broadcast paused!', {\r\n            reply_markup: new InlineKeyboard()\r\n\r\n                .text('Resume', 'brd:resume:' + ctx.match[1])\r\n                .text('Stop', 'brd:stop:' + ctx.match[1])\r\n        });\r\n\r\n    });\r\n    broadcastMiddleware.callbackQuery(/brd:resume:(\\w+)/, async (ctx) => {\r\n        await options.redisInstance.hdel(options.keyPrefix + 'info:' + ctx.match[1], 'paused');\r\n        return ctx.editMessageText(\r\n            \"Lets begin...\", {\r\n                reply_markup: new InlineKeyboard()\r\n                    .text('Pause', 'brd:pause:' + ctx.match[1])\r\n                    .text('Stop', 'brd:stop:' + ctx.match[1])\r\n            });\r\n    });\r\n    broadcastMiddleware.callbackQuery(/brd:preview:(\\w+)/, async (ctx) => {\r\n        let info = await options.redisInstance.hgetall(options.keyPrefix + 'info:' + ctx.match[1]);\r\n        let messageIds = info.message_ids.split('_').map((e: string) => Number.parseInt(e));\r\n        if (info.type === 'copy') {\r\n            return ctx.copyMessages(info.chat_id, messageIds)\r\n        } else if (info.type === 'forward') {\r\n            return ctx.forwardMessages(info.chat_id, messageIds)\r\n        }\r\n    });\r\n    broadcastMiddleware.callbackQuery(/brd:start:(\\w+)/, async (ctx) => {\r\n        let id = ctx.match[1];\r\n        await options.redisInstance.rpush(options.keyPrefix + 'list', id);\r\n        return ctx.editMessageText(`Broadcast added to queue it takes some time to start...`, {\r\n            reply_markup: new InlineKeyboard()\r\n                .text('Pause', 'brd:pause:' + id)\r\n                .text('Stop', 'brd:stop:' + id)\r\n        });\r\n    });\r\n    broadcastMiddleware.callbackQuery(/brd:stop:(\\w+)/, async (ctx) => {\r\n        return ctx.editMessageReplyMarkup({\r\n            reply_markup: new InlineKeyboard().text('Sure?')\r\n                .row()\r\n                .text('Yes', 'brd:stop_confirm:' + ctx.match[1])\r\n                .text('No', `brd:stop_cancel:${ctx.match[1]}`)\r\n        });\r\n    });\r\n    broadcastMiddleware.callbackQuery(/brd:stop_cancel/, async (ctx) => {\r\n        return ctx.editMessageReplyMarkup(\r\n            {\r\n                reply_markup: new InlineKeyboard()\r\n                    .text('Pause', 'brd:pause:' + ctx.match[1])\r\n            }\r\n        )\r\n    });\r\n    broadcastMiddleware.callbackQuery(/brd:stop_confirm:(\\w+)/, async (ctx) => {\r\n        let id = ctx.match[1];\r\n\r\n        await options.redisInstance.del(options.keyPrefix + 'chats:' + id);\r\n        await options.redisInstance.del(options.keyPrefix + 'info:' + id);\r\n        await options.redisInstance.lrem(options.keyPrefix + 'list', 1, id);\r\n        return ctx.editMessageText('Broadcast stopped');\r\n    });\r\n\r\n    return middleware;\r\n}\r\n\r\n\r\n","export function sleep(milli: number) {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, milli);\r\n    });\r\n}\r\n\r\nexport function buildProgressBtnText(percent: number, chars: number = 10) {\r\n    let progress = Math.floor(percent * chars);\r\n    let empty = chars - progress;\r\n    console.log({progress, empty});\r\n    return '█'.repeat(progress) + '░'.repeat(empty) + ` (${Math.floor(percent * 1000) / 10}%)`;\r\n}\r\n\r\nexport function buildProgressText(error: number, sent: number, total: number) {\r\n    return `⌛ Progress: ${error + (sent)}/${total}\r\n✅ Sent: ${sent}\r\n❌ Error: ${error} (${Math.floor((error / total) * 10000) / 100}%)`;\r\n}","import {BroadcastInfo, BroadcastOptions} from \"./types\";\r\nimport {GrammyError, InlineKeyboard} from \"grammy\";\r\nimport {buildProgressBtnText, buildProgressText, sleep} from \"./utils\";\r\nimport {ChatsFetcher} from \"./initChats.queue\";\r\n\r\n\r\nexport class BroadcastQueue {\r\n    private reportIds: Record<string, number> = {};\r\n    private lastReports: Record<string, Date> = {};\r\n    private waitTime: number = 0;\r\n\r\n    constructor(private options: BroadcastOptions) {\r\n\r\n    }\r\n\r\n    async checkBroadcasts() {\r\n\r\n        let broadcasts = await this.options.redisInstance.lrange(this.options.keyPrefix + 'list', 0, -1);\r\n        if (broadcasts.length > 0) {\r\n            for (let broadcastId of broadcasts) {\r\n                await this.sendBroadcast(broadcastId,);\r\n            }\r\n        }\r\n        setTimeout(this.checkBroadcasts.bind(this), this.options.checkQueueInterval);\r\n\r\n    }\r\n\r\n    async sendBroadcast(id: string) {\r\n        let broadcastInfo = await this.options.redisInstance.hgetall(this.options.keyPrefix + 'info:' + id) as unknown as BroadcastInfo;\r\n        if (broadcastInfo.total === '-1') {\r\n            console.log(\"fetching chats\")\r\n            let fetcher = new ChatsFetcher(this.options);\r\n            await fetcher.fetchChats(broadcastInfo);\r\n        }\r\n        if (!broadcastInfo) {\r\n            await this.options.redisInstance.lrem(this.options.keyPrefix + 'list', 1, id);\r\n            return;\r\n        }\r\n        let chats = await this.options.redisInstance.lpop(this.options.keyPrefix + 'chats:' + id, this.options!.chunkSize!);\r\n\r\n        if (broadcastInfo.paused) return;\r\n\r\n        if (!chats?.length) {\r\n            await this.options.redisInstance.del(this.options.keyPrefix + 'chats:' + id);\r\n            await this.options.redisInstance.del(this.options.keyPrefix + 'info:' + id);\r\n            await this.options.redisInstance.lrem(this.options.keyPrefix + 'list', 1, id);\r\n            await this.sendProgress(broadcastInfo, true);\r\n            return;\r\n        }\r\n        broadcastInfo.sent = broadcastInfo.sent || '0';\r\n        broadcastInfo.error = broadcastInfo.error || '0';\r\n        for (let chat of chats!) {\r\n            let isSent = await this.sendToChat(chat, broadcastInfo);\r\n            if (isSent) {\r\n                broadcastInfo.sent = ((+broadcastInfo.sent) + 1).toString();\r\n                await this.options.redisInstance.hincrby(this.options.keyPrefix + 'info:' + id, 'sent', 1);\r\n            } else {\r\n                broadcastInfo.error = ((+broadcastInfo.error) + 1).toString();\r\n                await this.options.redisInstance.hincrby(this.options.keyPrefix + 'info:' + id, 'error', 1);\r\n\r\n            }\r\n        }\r\n        await this.sendProgress(broadcastInfo);\r\n        await this.sendBroadcast(id);\r\n\r\n    }\r\n\r\n    async sendProgress(broadcastInfo: BroadcastInfo, finished: boolean = false) {\r\n        if (this.options.progressCallback) {\r\n            this.options.progressCallback(\r\n                broadcastInfo.id,\r\n                +broadcastInfo.sent!,\r\n                +broadcastInfo.error!,\r\n                +broadcastInfo.total!\r\n            )\r\n            return;\r\n        }\r\n        let error = +broadcastInfo.error!;\r\n        let api = await this.options.getApi(+broadcastInfo.botId);\r\n\r\n        let percent = (error + (+broadcastInfo.sent!) / +broadcastInfo.total!);\r\n        let replyMarkup = new InlineKeyboard()\r\n            .text(buildProgressBtnText(percent,), `brd:progress:${broadcastInfo.id}`)\r\n            .row()\r\n            .text(\"Pause\", `brd:pause:${broadcastInfo.id}`)\r\n            .text('Stop', `brd:stop:${broadcastInfo.id}`)\r\n\r\n        let progressText = buildProgressText(error, +broadcastInfo.sent!, +broadcastInfo.total!);\r\n        if (finished) {\r\n            await api.sendMessage(broadcastInfo.chat_id, `✅ Broadcast finished\r\n${progressText}`);\r\n            return;\r\n        }\r\n        let msgId = this.reportIds[broadcastInfo.id];\r\n        if (!msgId) {\r\n            await api.sendMessage(broadcastInfo.chat_id, `✅ Broadcast Started\r\n${progressText}`, {\r\n                reply_markup: replyMarkup\r\n            });\r\n        } else {\r\n            let lastReport = this.lastReports[broadcastInfo.id];\r\n            if (lastReport && Date.now() - lastReport.getTime() < this.options.reportFrequency!) {\r\n                return;\r\n            }\r\n            await api.editMessageText(broadcastInfo.chat_id, msgId, `⌛ Broadcasting\r\n${progressText}`, {\r\n                reply_markup: replyMarkup\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    async sendToChat(chatId: string, broadcastInfo: BroadcastInfo): Promise<boolean> {\r\n        let msgIds = broadcastInfo.message_ids?.split('_').map((e) => parseInt(e));\r\n        let api = await this.options.getApi(+broadcastInfo.botId);\r\n        try {\r\n            if (broadcastInfo.type === 'text') {\r\n                await api.sendMessage(chatId, broadcastInfo.text!);\r\n            } else if (broadcastInfo.type === 'forward') {\r\n                await api.forwardMessages(chatId, broadcastInfo.chat_id, msgIds!);\r\n            } else if (broadcastInfo.type === 'copy') {\r\n                await api.copyMessages(chatId, broadcastInfo.chat_id, msgIds!);\r\n            }\r\n            if (this.waitTime) {\r\n                await sleep(this.waitTime);\r\n            }\r\n            return true;\r\n        } catch (err) {\r\n            let retry = await this.handleError(chatId, err);\r\n            if (retry) {\r\n                await this.sendToChat(chatId, broadcastInfo);\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    async handleError(chatId: string, error: Error | GrammyError): Promise<boolean> {\r\n        const message = 'description' in error ? error.description : error.message;\r\n        const errorMessage = (message).toLowerCase();\r\n        const setRestricted = this.options.setRestricted?.bind(null, chatId) || ((reason) => {\r\n            console.log(`ChatId: ${chatId} is restricted for reason: ${reason} you didn't handled this error`);\r\n        });\r\n        if (errorMessage.includes('blocked')) {\r\n            setRestricted('block');\r\n        }\r\n        if (errorMessage.includes('deactivated')) {\r\n            setRestricted('deactivated');\r\n        }\r\n        if (errorMessage.includes('kicked')) {\r\n            setRestricted('banned');\r\n        }\r\n        if (errorMessage.includes('restricted')) {\r\n            setRestricted('restricted');\r\n        }\r\n        if ('parameters' in error) {\r\n            if (error.parameters.retry_after) {\r\n                await sleep(\r\n                    error.parameters.retry_after * 1000\r\n                )\r\n                this.waitTime += 100;\r\n                // why we reached limits?\r\n                // in that case we add some sleep to requests\r\n                return true;\r\n            }\r\n        }\r\n        // todo: more errors\r\n        return false;\r\n    }\r\n\r\n\r\n}\r\n","import {BroadcastInfo, BroadcastOptions} from \"./types\";\r\n\r\n\r\nexport class ChatsFetcher {\r\n    constructor(private options: BroadcastOptions) {\r\n    }\r\n\r\n    async fetchChats(broadcast: BroadcastInfo) {\r\n        let chatOffset = +(broadcast.chatOffset || '0')\r\n\r\n\r\n        while (true) {\r\n            let chatIds = await this.options.getBroadcastChats(chatOffset, this.options.chunkSize!, broadcast.chatFilter);\r\n            await this.options.redisInstance.rpush(this.options.keyPrefix + 'chats:' + broadcast.id, ...chatIds);\r\n            if (chatIds.length < this.options.chunkSize!) {\r\n                await this.options.redisInstance.hset(this.options.keyPrefix + 'info:' + broadcast.id, 'total', (chatOffset + chatIds.length));\r\n                broadcast.total = (chatOffset + chatIds.length).toString();\r\n                break;\r\n            }\r\n\r\n            chatOffset += chatIds.length;\r\n            await this.options.redisInstance.hset(this.options.keyPrefix + 'info:' + broadcast.id, 'chatOffset', chatOffset.toString());\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import {BroadcastOptions, Defaults} from \"./types\";\r\n\r\nimport {getMiddleware} from \"./middleware\";\r\nimport {BroadcastQueue} from \"./broadcast.queue\";\r\n\r\nconst defaultOptions: Defaults<BroadcastOptions> = {\r\n    chunkSize: 100,\r\n    keyPrefix: 'brdc:',\r\n    reportFrequency: 60 * 1000,\r\n    progressCallback: null,\r\n    setRestricted: null,\r\n    checkQueueInterval: 60 * 1000,\r\n    hasPermission: null,\r\n    cmds: {\r\n        broadcast: 'broadcast',\r\n        copy: 'copy',\r\n        forward: 'forward',\r\n        addmsg: 'addmsg'\r\n    }\r\n}\r\n\r\nclass Broadcaster {\r\n    static _instance?: Broadcaster;\r\n\r\n    private constructor(private options: BroadcastOptions) {\r\n\r\n    }\r\n\r\n    static getInstance(options: BroadcastOptions) {\r\n        if (Broadcaster._instance) {\r\n            return Broadcaster._instance;\r\n        }\r\n        let instance = new Broadcaster(options);\r\n        const queue = new BroadcastQueue(options);\r\n        queue.checkBroadcasts().then(() => {\r\n        });\r\n        Broadcaster._instance = instance;\r\n        return instance;\r\n    }\r\n\r\n    getMiddleware() {\r\n        return getMiddleware(this.options);\r\n    }\r\n\r\n\r\n}\r\n\r\nexport function createBroadcaster(options: BroadcastOptions) {\r\n    const allOptions = {\r\n        ...defaultOptions,\r\n        cmds: {\r\n            ...defaultOptions.cmds,\r\n            ...options.cmds\r\n        },\r\n        ...options\r\n    }\r\n    return Broadcaster.getInstance(allOptions);\r\n}"],"mappings":"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","names":["_a","InlineKeyboard","InlineKeyboard"]}